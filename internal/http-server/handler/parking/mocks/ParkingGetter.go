// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/PIRSON21/parking/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ParkingGetter is an autogenerated mock type for the ParkingGetter type
type ParkingGetter struct {
	mock.Mock
}

// GetParkingByID provides a mock function with given fields: parkingID
func (_m *ParkingGetter) GetParkingByID(parkingID int) (*models.Parking, error) {
	ret := _m.Called(parkingID)

	if len(ret) == 0 {
		panic("no return value specified for GetParkingByID")
	}

	var r0 *models.Parking
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Parking, error)); ok {
		return rf(parkingID)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Parking); ok {
		r0 = rf(parkingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Parking)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(parkingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParkingCells provides a mock function with given fields: _a0
func (_m *ParkingGetter) GetParkingCells(_a0 *models.Parking) ([][]models.ParkingCell, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetParkingCells")
	}

	var r0 [][]models.ParkingCell
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Parking) ([][]models.ParkingCell, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*models.Parking) [][]models.ParkingCell); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]models.ParkingCell)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Parking) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParkingsList provides a mock function with given fields: search
func (_m *ParkingGetter) GetParkingsList(search string) ([]*models.Parking, error) {
	ret := _m.Called(search)

	if len(ret) == 0 {
		panic("no return value specified for GetParkingsList")
	}

	var r0 []*models.Parking
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Parking, error)); ok {
		return rf(search)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Parking); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Parking)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewParkingGetter creates a new instance of ParkingGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingGetter {
	mock := &ParkingGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
