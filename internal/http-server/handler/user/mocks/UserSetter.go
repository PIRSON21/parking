// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/PIRSON21/parking/internal/models"
	mock "github.com/stretchr/testify/mock"

	request "github.com/PIRSON21/parking/internal/lib/api/request"

	user "github.com/PIRSON21/parking/internal/http-server/handler/user"
)

// UserSetter is an autogenerated mock type for the UserSetter type
type UserSetter struct {
	mock.Mock
}

// CreateNewManager provides a mock function with given fields: _a0
func (_m *UserSetter) CreateNewManager(_a0 *request.UserCreate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewManager")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*request.UserCreate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteManager provides a mock function with given fields: _a0
func (_m *UserSetter) DeleteManager(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManager")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManagerByID provides a mock function with given fields: _a0
func (_m *UserSetter) GetManagerByID(_a0 int) (*models.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetManagerByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManager provides a mock function with given fields: _a0
func (_m *UserSetter) UpdateManager(_a0 *user.UserPatch) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManager")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*user.UserPatch) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserSetter creates a new instance of UserSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserSetter {
	mock := &UserSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
