// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "github.com/PIRSON21/parking/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserGetter is an autogenerated mock type for the UserGetter type
type UserGetter struct {
	mock.Mock
}

// AuthenticateManager provides a mock function with given fields: manager
func (_m *UserGetter) AuthenticateManager(manager *models.User) (int, error) {
	ret := _m.Called(manager)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateManager")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (int, error)); ok {
		return rf(manager)
	}
	if rf, ok := ret.Get(0).(func(*models.User) int); ok {
		r0 = rf(manager)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(manager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagerByID provides a mock function with given fields: id
func (_m *UserGetter) GetManagerByID(id int) (*models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetManagerByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagers provides a mock function with no fields
func (_m *UserGetter) GetManagers() ([]*models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetManagers")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSessionID provides a mock function with given fields: userID, sessionID
func (_m *UserGetter) SetSessionID(userID int, sessionID string) error {
	ret := _m.Called(userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for SetSessionID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserGetter creates a new instance of UserGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserGetter {
	mock := &UserGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
